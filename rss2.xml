<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>D&#39;s Outreachy Blog</title>
    <link>https://garbados.github.io/outreachy-blog/</link>
    <atom:link href="/outreachy-blog/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>This is a blog about my 2017 internship with Outreachy and Yocto. Please enjoy your stay.</description>
    <pubDate>Wed, 19 Jul 2017 03:16:56 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Documentation is Hard</title>
      <link>https://garbados.github.io/outreachy-blog/documentation-is-hard/</link>
      <guid>https://garbados.github.io/outreachy-blog/documentation-is-hard/</guid>
      <pubDate>Tue, 18 Jul 2017 21:19:13 GMT</pubDate>
      <description>
      
        &lt;p&gt;Producing effective documentation can be very difficult. The labor attendant with maintaining it tends to grow exponentially with the com
      
      </description>
      
      <content:encoded><![CDATA[<p>Producing effective documentation can be very difficult. The labor attendant with maintaining it tends to grow exponentially with the complexity and maturity of your project. Once tiny guides explode over time into sprawling works, while APIs you described in meticulous, comprehensive detail quickly come to lack critical examples. And still, even when you‚Äôve done the best you can do, users show up in your IRC channel asking basic questions because they didn‚Äôt read the manual. After a while, you wonder if you can blame them.</p>
<p>I wouldn‚Äôt know how to program if it weren‚Äôt for documentation. Poring over readmes and <a href="https://docs.python.org/3/index.html" target="_blank" rel="external">Sphinx sites</a> and <a href="http://backbonejs.org/docs/backbone.html" target="_blank" rel="external">annotated source code</a>, and eventually <a href="https://github.com/garbados/prisoners-dilemma-tournament#prisoners-dilemma-tournament" target="_blank" rel="external">writing my own</a> has given me a deep appreciation for the language we use to make our works accessible. There are some things I‚Äôve come to expect from documentation, so I figured I‚Äôd share them:</p>
<h2 id="Readmes"><a href="#Readmes" class="headerlink" title="Readmes"></a>Readmes</h2><p>For projects of a certain size or nature, the first thing your potential users will encounter might be your readme. I can‚Äôt tell you how many readmes I‚Äôve encountered that only included the name of the project and a single sentence vaguely referencing the intended functionality. Even if you haven‚Äôt got users, what happens when you need to put the project down? Do you expect your future self, upon returning to it, to painstakingly explore the source code all the while wondering, ‚ÄúWhat was I thinking?‚Äù</p>
<p>Save yourself the trouble. Include these basic items:</p>
<ul>
<li>Project name: How should I call your project?</li>
<li>Project description: What does it do? Who is it for?</li>
<li>Project status: Is the project active? Alpha? Beta? Ready for production? Badges (ex: Travis, Coveralls, Greenkeeper, etc.) can help communicate the liveliness of the project. If the project is dead or you have no plans to support it, say so.</li>
<li>Demo link: Is there a demo? If it‚Äôs a static site, is it deployed somewhere I can visit?</li>
<li>Install instructions: How do I install the project? What does it depend on?</li>
<li>Usage instructions: How do I use the project? If it has an executable, what flags and arguments does it use? If I need to modify source files to make it work for me, what do I need to modify? How? Why?</li>
<li>Testing instructions: If there‚Äôs a test suite (There better be!) how do I run it?</li>
<li>Contributor instructions: How should I file a bug report? A feature request? How do I submit patches or PRs? Include links, even examples if you have complex requirements. If it starts to span more than a paragraph, consider writing a CONTRIBUTING file (<a href="https://github.com/beakerbrowser/hashbase/blob/master/CONTRIBUTING.md" target="_blank" rel="external">example</a>) and referencing it from your readme.</li>
<li>License information: By using your project, what legalese must I oblige? If I need permission to use it, whose permission do I need? How can I contact them?</li>
</ul>
<p>As your project grows, more and more of these sections will become links to more comprehensive documents. Still, keeping these sections in your readme even only as links establishes canonical locations for relevant docs.</p>
<h2 id="API-docs"><a href="#API-docs" class="headerlink" title="API docs"></a>API docs</h2><p>If you‚Äôve got an API, whether a library exposing methods or an HTTP interface, it needs two essentials:</p>
<ul>
<li>Practical examples: How do I accomplish the things the project is actually for? Example by example, describe best practices for common tasks.</li>
<li>Reference docs: List every public method and describe its parameters. Options, headers, understanding possible errors, etc. CouchDB does <a href="https://couchdb.readthedocs.io/en/2.0.0/api/index.html" target="_blank" rel="external">a good job</a> on this.</li>
</ul>
<p>It frustrates me to no end when I find libraries with hidden methods that only the maintainers are aware of. Document everything!</p>
<h2 id="Audience-Considerations"><a href="#Audience-Considerations" class="headerlink" title="Audience Considerations"></a>Audience Considerations</h2><p>As your project grows, you might find people evaluating it who will not be using it directly. You might have seen a <a href="https://github.com/Netflix/unleash#convince-your-manager-why-use-unleash" target="_blank" rel="external">convince your manager</a> section in a readme or two. Often, the manager themself will be reading your documentation, even if they don‚Äôt know a <code>for</code> from a <code>while</code>. Think hard about who is using your project for what, and how their needs for information differ. Some folks care about testimonials or how and whether anyone else is using the project. Some folks want guides for use in production, details about performance and scaling considerations, comparisons to similar tools, etc. Some folks wanna know who they can pay for a number to call at 3am in a panic about their failing code. As your project matures, rifts in your userbase will emerge, and their needs will grow more distinct. Think hard about how to accommodate those differences.</p>
<h2 id="Accessibility-Considerations"><a href="#Accessibility-Considerations" class="headerlink" title="Accessibility Considerations"></a>Accessibility Considerations</h2><p>Not everyone can read, not everyone can read English, and not everyone can read long bodies of text. Video tutorials can help those with dyslexia, and keeping guides short and to the point can help folks who struggle with focus. Segment your documentation into focused sections instead of agglomerating them into 100k+ word manuals. For the folks who want that mega manual to be as mega as possible, many documentation frameworks today provide utilities for building a PDF from your docs which you can distribute to users.</p>
<p>Consider also internationalization as a matter of accessibility. Baking i18n into your documentation build pipeline will save you work as the project matures, even if you only start with one language. Welcome translations but do your best to double-check them like you would any PR.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Docs matter! Do your best to make them great. Use what you make, and write the docs you want to see in the world. This guide is only a primer for the broader world of documentation best practices, so look around for advice that resonates with you, and think about the documentation that especially helped you.</p>
<p>Good luck! I believe in you üíñ</p>
]]></content:encoded>
      
      <comments>https://garbados.github.io/outreachy-blog/documentation-is-hard/#disqus_thread</comments>
    </item>
    
    <item>
      <title>The Layer Index and Asynchronous Task Queues in Django</title>
      <link>https://garbados.github.io/outreachy-blog/the-layer-index/</link>
      <guid>https://garbados.github.io/outreachy-blog/the-layer-index/</guid>
      <pubDate>Wed, 21 Jun 2017 22:50:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;Greetings!&lt;/p&gt;
&lt;p&gt;I‚Äôve been working full-time on the &lt;a href=&quot;https://yoctoproject.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project&lt;/a&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Greetings!</p>
<p>I‚Äôve been working full-time on the <a href="https://yoctoproject.org/" target="_blank" rel="external">Yocto Project</a> for a couple weeks now, and I‚Äôd like to talk about what I‚Äôve been up to so far.</p>
<p>First, what is Yocto? It‚Äôs a collection of FOSS projects for building Linux distributions for embedded systems, like RasberryPi boards. The distributions you create using tools like bitbake can then be imaged onto hardware, allowing you to (for example) quickly prepare routers with the necessary drivers and networking software to create a <a href="https://en.wikipedia.org/wiki/Mesh_networking" target="_blank" rel="external">mesh network</a>. Outside of my internship, I hope to develop a production pipeline for inexpensive mesh nodes, somewhat like <a href="https://piratebox.cc/" target="_blank" rel="external">PirateBox</a>, and tools like bitbake will be a big part of that effort.</p>
<p>My mentor, Libertad Cruz, showed me a handful of bugs on a project called <a href="https://layers.openembedded.org" target="_blank" rel="external">layerindex-web</a> which indexes layers and recipes on top of <a href="https://www.openembedded.org/wiki/OpenEmbedded-Core" target="_blank" rel="external">OE-Core</a>. For example, there‚Äôs the <a href="https://git.yoctoproject.org/cgit/cgit.cgi/meta-raspberrypi/about/" target="_blank" rel="external">meta-rasberrypi</a> layer which provides support for developing distributions for RasberryPi boards. A recipe might be a distribution you can further customize, or instructions for including certain software in a distribution.</p>
<p>layerindex-web is a Django application that allows users to submit layers. The application uses git repo addresses to infer information about a layer, including its recipes and branches. An interesting feature of the site is that maintainers have editing rights over the things they maintain, but a maintainer doesn‚Äôt need an account on the site to be listed as a maintainer. Thus, non-maintainers can submit layers to the index, and the maintainer can create an account later in order to make any necessary edits, should they be so inclined. All layers require admin sign-off before they are published to the index.</p>
<p>The first issue I chose to tackle requested the implementation of an asynchronous task runner, so that tasks like sending emails or fetching layer information don‚Äôt block page rendering. In some cases, this means requests might time out for taking too long, or if they error out, the page would fail to load. I chose to use <a href="https://www.rabbitmq.com/" target="_blank" rel="external">RabbitMQ</a> and <a href="http://docs.celeryproject.org/en/latest/" target="_blank" rel="external">Celery</a> to do the job. RabbitMQ is a message broker, like a specialized kind of database, which runs outside of Django. Celery is a distributed task queue written in Python. It runs inside Django, and communicates with RabbitMQ to manage the queue and execute tasks asynchronously.</p>
<p>Enough background. Here‚Äôs how I implemented an asynchronous task queue in Python 3.5 and Django 1.8:</p>
<h2 id="Installing-RabbitMQ"><a href="#Installing-RabbitMQ" class="headerlink" title="Installing RabbitMQ"></a>Installing RabbitMQ</h2><p>On systems with <code>apt-get</code> like Ubuntu, do this:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install rabbitmq-server</div></pre></td></tr></table></figure>
<p>This installs the RabbitMQ server, and starts the server daemon with some default settings. See <a href="https://www.rabbitmq.com/configure.html" target="_blank" rel="external">Configuring RabbitMQ</a> for more information about configurating settings. Within development and QA, the default settings might be sufficient for you. They are for me.</p>
<p>If you use Docker or Vagrant or Chef or some other kind of automated provisioning tool, you‚Äôll need to add instructions to include RabbitMQ in your build. You can find more information, including recipes, in <a href="https://www.rabbitmq.com/download.html" target="_blank" rel="external">RabbitMQ‚Äôs installation guides</a>.</p>
<p>Then, you‚Äôll need to include connection information in your application‚Äôs <code>settings.py</code>. Here‚Äôs how I did it:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># RabbitMQ settings</span></div><div class="line">RABBIT_BROKER = <span class="string">'amqp://'</span></div><div class="line">RABBIT_BACKEND = <span class="string">'rpc://'</span></div></pre></td></tr></table></figure>
<p>Those reflect RabbitMQ‚Äôs default settings. The broker is the location of the message broker (RabbitMQ in this case), the backend is the protocol used to send messages to the broker. Celery will know what to do with these settings.</p>
<h2 id="Using-Celery"><a href="#Using-Celery" class="headerlink" title="Using Celery"></a>Using Celery</h2><p>Use <a href="https://pypi.python.org/pypi/pip" target="_blank" rel="external">pip</a> to install Celery, and add it to your <code>requirements.txt</code> file:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install celery</div><div class="line">pip freeze &gt; requirements.txt</div></pre></td></tr></table></figure>
<p>Now create a <code>tasks.py</code> file in your project. The name is arbitrary, I just find the name appropriate for, y‚Äôknow, writing tasks. Paste something like this as a starting point:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tasks.py</span></div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> EmailMessage</div><div class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> RABBIT_BROKER, RABBIT_BACKEND</div><div class="line"><span class="comment"># Celery namespaces task queues, so you can</span></div><div class="line"><span class="comment"># theoretically run several under different names.</span></div><div class="line"><span class="comment"># To start, we'll only use one, named after your app.</span></div><div class="line">APP_NAME = <span class="string">"the-name-of-your-application"</span></div><div class="line"><span class="comment"># Set up the task queue</span></div><div class="line">tasks = Celery(APP_NAME, broker=RABBIT_BROKER, backend=RABBIT_BACKEND)</div><div class="line"><span class="comment"># Register a 'hello_world' task</span></div><div class="line"><span class="comment"># which can then be called via `tasks.hello_world()`</span></div><div class="line"><span class="meta">@tasks.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(txt=<span class="string">"Hello, world!"</span>)</span>:</span></div><div class="line">	print(txt)</div><div class="line"><span class="comment"># For a more practical example, register a 'send_email' task</span></div><div class="line"><span class="comment"># which asynchronously sends an email:</span></div><div class="line"><span class="meta">@tasks.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_email</span><span class="params">(subject, text_content, from_email, to_emails=[])</span>:</span></div><div class="line">	msg = EmailMessage(subject, text_content, from_email, to_emails)</div><div class="line">	<span class="keyword">return</span> msg.send()</div></pre></td></tr></table></figure>
<p>From another file, such as views.py, you can import the tasks object and use it in your views. For example:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># views.py</span></div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User, Permission</div><div class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</div><div class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</div><div class="line"><span class="keyword">from</span> django.template.loader <span class="keyword">import</span> get_template</div><div class="line"><span class="keyword">from</span> forms <span class="keyword">import</span> EditLayerForm, LayerMaintainerFormSet</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> LayerItem, LayerBranch, Branch</div><div class="line"><span class="keyword">from</span> tasks <span class="keyword">import</span> tasks</div><div class="line"><span class="keyword">import</span> settings</div><div class="line"><span class="comment"># Consider a view that emails admins</span></div><div class="line"><span class="comment"># whenever a new layer is submitted.</span></div><div class="line"><span class="comment"># This is a simplified version of the view</span></div><div class="line"><span class="comment"># used in layerindex-web.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">submit_layer_view</span><span class="params">(request, branch_name=<span class="string">"master"</span>)</span>:</span></div><div class="line">  <span class="comment"># Instantiate the objects that will be associated with the new layer.</span></div><div class="line">	branchobj = Branch.objects.filter(name=branch)[:<span class="number">1</span>].get()</div><div class="line">	layeritem = LayerItem()</div><div class="line">	layerbranch = LayerBranch(layer=layeritem, branch=branchobj)</div><div class="line">  <span class="comment"># Ensure submitted layer info is valid by passing it through forms.</span></div><div class="line">	form = EditLayerForm(request.user, layerbranch, request.POST, instance=layeritem)</div><div class="line">	maintainerformset = LayerMaintainerFormSet(request.POST, instance=layerbranch)</div><div class="line">	<span class="keyword">if</span> form.is_valid() <span class="keyword">and</span> maintainerformset.is_valid():</div><div class="line">		form.save()</div><div class="line">		layerbranch.save()</div><div class="line">		maintainerformset.save()</div><div class="line">		<span class="comment"># Send email to those who can publish layers</span></div><div class="line">		plaintext = get_template(<span class="string">'layerindex/submitemail.txt'</span>)</div><div class="line">		perm = Permission.objects.get(codename=<span class="string">'publish_layer'</span>)</div><div class="line">		users = User.objects.filter(Q(groups__permissions=perm) | Q(user_permissions=perm) | Q(is_superuser=<span class="keyword">True</span>) ).distinct()</div><div class="line">		subject = <span class="string">'%s - %s'</span> % (settings.SUBMIT_EMAIL_SUBJECT, layeritem.name)</div><div class="line">		from_email = settings.SUBMIT_EMAIL_FROM</div><div class="line">		<span class="keyword">for</span> user <span class="keyword">in</span> users:</div><div class="line">			d = Context(&#123;</div><div class="line">				<span class="string">'layer_name'</span>: layeritem.name,</div><div class="line">				<span class="string">'layer_url'</span>: request.build_absolute_uri(reverse(<span class="string">'layer_review'</span>, args=(layeritem.name,))),</div><div class="line">				<span class="string">'user_name'</span>: user.first_name <span class="keyword">if</span> user.first_name <span class="keyword">else</span> user.username</div><div class="line">			&#125;)</div><div class="line">			text_content = plaintext.render(d)</div><div class="line">			tasks.send_email(subject, text_content, from_email, [user.email])</div><div class="line">		<span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'submit_layer_thanks'</span>))</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">return</span> HttpResponse(<span class="string">"The forms you submitted were invalid, my friend."</span>, content_type=<span class="string">"text/plain"</span>, status_code=<span class="number">400</span>)</div></pre></td></tr></table></figure>
<p>That view processes a submitted layer, validating the relevant forms and saving new objects before emailing admins. When you call <code>tasks.send_email</code>, Celery communicates with RabbitMQ to create a task for sending the emails. Then, as it consumes tasks from the queue, it sends the emails. This allows you to redirect the user that submitted the layer appropriately (ex: to a ‚Äúthank you‚Äù page) without waiting for the emails to send. If you sent them synchronously, then any error while sending (such as a defunct email address) would show up for the user as a 500 error. Sending them asynchronously, you could instead log the error or take corrective action without holding up the user.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>That‚Äôs it! You‚Äôve set up an asynchronous task queue in Django. I hope you found these instructions helpful!</p>
]]></content:encoded>
      
      <comments>https://garbados.github.io/outreachy-blog/the-layer-index/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://garbados.github.io/outreachy-blog/hello-world/</link>
      <guid>https://garbados.github.io/outreachy-blog/hello-world/</guid>
      <pubDate>Wed, 14 Jun 2017 22:50:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;Hello! My name is Diana.&lt;/p&gt;
&lt;p&gt;I‚Äôve been asked to develop a blog to discuss my activities and experiences during my internship with Yoct
      
      </description>
      
      <content:encoded><![CDATA[<p>Hello! My name is Diana.</p>
<p>I‚Äôve been asked to develop a blog to discuss my activities and experiences during my internship with Yocto through the Outreachy program. This is that blog.</p>
<p>I‚Äôm excited about the program, but visibility makes me very nervous! So, this blog will focus on the tech that I use and work with over the next few months.</p>
<p>The blog itself is built with <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> and uses a <a href="https://github.com/garbados/cactus-dark" target="_blank" rel="external">fork</a> of the <a href="https://github.com/probberechts/cactus-dark" target="_blank" rel="external">cactus-dark</a> theme. I host it through GitHub Pages <a href="https://garbados.github.io/outreachy-blog">here</a>. I like Hexo because I‚Äôm comfortable with JavaScript, and I publish through GitHub because it‚Äôs free. You can check out the blog‚Äôs source code <a href="https://github.com/garbados/outreachy-blog" target="_blank" rel="external">here</a>.</p>
<p>I believe in you. Wish me luck through this, ok? üíñ</p>
]]></content:encoded>
      
      <comments>https://garbados.github.io/outreachy-blog/hello-world/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
